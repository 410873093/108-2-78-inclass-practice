str(sourse)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
install.packages("jsonlite")
install.packages("rvest")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
install.packages("magrittr")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
View(transcript100to103)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source(https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")-> a
str(a)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")-> a
str(transcript100to103)
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
View(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 只要成績大於85的
pick_above85 <-
transcript100to103$成績 > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
table(transcript100to103$學屆[pick_above85])
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
table(transcript100to103$學屆)
table(transcript100to103$學屆[pick_above85])
print(example[c("name","birthday")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$`期間` >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
exchangeRate_after98
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
print(example[c("name","allowance")])
str(example[c("name","height")])
example$name[c(T,F,T,F)]
example$height>=170->pick_above170
example$name[pick_above170]
print(example[c("name","allowance")])
example$allowance <-
ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
ordered(example$allowance)
example$allowance <-
ordered(example$allowance)
example$allowance <-
ordered(example$allowance)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
exchangeRate_after98
print(example[c("name","allowance")])
example$allowance <-
ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
print(example[c("name","allowance")])
example$allowance <-
ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
print(example[c("name","allowance")])
example$allowance <-
ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$name[pick_allowanceOver1000]
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female
)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female
)
sum(list_victimAges_female$`數目`)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
exchangeRate_after98
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
exchangeRate_after98
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female
)
sum(list_victimAges_female$`數目`,na.rm=T)
as.integer(list_victimAges_female$數目)->list_victimAges_female$數目
as.integer(list_victimAges_female$`數目`)->list_victimAges_female$`數目`
sum(list_victimAges_female$`數目`,na.rm=T)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female
)
as.integer(list_victimAges_female$`數目`)->list_victimAges_female$`數目`
as.vector(list_victimAges_female$年齡層)->list_victimAges_female$年齡層
sum(list_victimAges_female$`數目`,na.rm=T)
as.integer(list_victimAges_female$`數目`)->list_victimAges_female$`數目`
as.vector(list_victimAges_female$年齡層)->list_victimAges_female$年齡層
sum(list_victimAges_female$`數目`,na.rm=T)
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
exchangeRate_after98
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
a <- 2
a = 2 # = 與 <-同義
3 -> b
a+b
my_108_total_credits <- 15
_108_total_credits <- 15
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_even<-sequenceNums%% 2
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
sequenceNums%% 2
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_even<-sequenceNums%% 2
sequenceNums[pick_even]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_even<-(sequenceNums%% 2)==0
sequenceNums[pick_even]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
str(transcript100to103)
str(transcript100to103)
set_LawBusiness<-c("法學院","商學院")
str(transcript100to103)
set_LawBusiness<-c("法學院","商學院")
transcript100to103$學院%in%set_LawBusiness->pick_LawBusiness
str(transcript100to103)
transcript100to103$學院%in%set_LawBusiness->pick_LawBusiness
pick_LawBusiness
str(transcript100to103)
str(transcript100to103)
factor(transcript100to103$學院)
unique(transcript100to103$學院)
unique(transcript100to103$`學院`)
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理 <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理 <- ! pick_fromTaipeiMetro
# 或
example$name[pick_not_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)
x3 <- c(NA,"小花")
y3 <- c(NA,"小華")
is.na(x2)
x2
x2
is.na(x2)
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
str(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
View(garbageRoutes)
View(garbageRoutes)
# 由linename元素判斷垃圾車有幾條路線。
garbageRoutes$linename %>% factor() -> garbageRoutes$linename
# 由linename元素判斷垃圾車有幾條路線。
factor() -> garbageRoutes$linename
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
levels(garbageRoutes$linename)
factor(garbageRoutes$linename) -> garbageRoutes$linename
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"  )
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"  )
pick_afternoonRoutes
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
?str_detect
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01] )
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "a")
str_detect(fruit, "^a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
str_detect(fruit, a)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
stringi::stri_detect(fruit, "a")
stringr::str_detect(fruit, "a")
install.packages("stringr")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")
stringr::str_detect(fruit, "a$")
stringr::str_detect(fruit, "[aeiou]")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
str(CDC_chatbox)
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
str(CDC_chatbox)
stringr::str_detect(CDC_chatbox,"肺炎")->pick_CDC
CDC_chatbox$Question[pick_CDC]
stringr::str_detect(CDC_chatbox$Question,"肺炎")->pick_CDC
CDC_chatbox$Question[pick_CDC]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
View(badEmployers)
levels(badEmployers$law)->violatedArticles
violatedArticles
# violatedArticles
class(badEmployers$law)
print(violatedArticles)
levels(as.factor(badEmployers$law))->violatedArticles
print(violatedArticles)
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
as.character(violatedArticles)
violatedArticles
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
violatedArticles
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
as.character(violatedArticles)
violatedArticles
# violatedArticles
table(badEmployers)
View(badEmployers)
table(violatedArticles)
table(violatedArticles)->table_countsByArticle
names(ta)
table(violatedArticles)->table_countsByArticle
names(table_countsByArticle)
# table_countsByArticle
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
levels(as.factor(badEmployers$law))->violatedArticles
violatedArticles
# violatedArticles
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
example[c("name","birthday","residence")]
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
