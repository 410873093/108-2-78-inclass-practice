list_major3_allYears # 社工系
major
get_coursesAllYears <- function(entranceYears, majors){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
get_coursesAllYears <- function(entranceYears, majors){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
get_coursesAllYears <- function(entranceYears, majors){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
get_coursesAllYears <- function(entranceYears, majors){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
get_coursesAllYears <- function(entranceYears, majors){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
same_grade<-function(entranceYears,major){
pick_year<-courseStructure$`學年`==entranceYears
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)
}
list(
entranceYears=100:103,
year1=map(entranceYears,)
)
same_grade<-function(entranceYears,major){
pick_year<-courseStructure$`學年`==entranceYears
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)
}
list(
entranceYears=100:103,
year1=map(entranceYears,~same_grade(.x,"經濟系1")),
year2=map(entranceYears,~same_grade(.x,"經濟系2)),
year3=map(entranceYears,~same_grade(.x,"經濟系3")),
same_grade<-function(entranceYears,major){
pick_year<-courseStructure$`學年`==entranceYears
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)
}
list(
entranceYears=100:103,
year1=map(entranceYears,~same_grade(.x,"經濟系1")),
year2=map(entranceYears,~same_grade(.x,"經濟系2")),
year3=map(entranceYears,~same_grade(.x,"經濟系3")),
year4=map(entranceYears,~same_grade(.x,"經濟系4"))
)
# list_econCourseCounts
same_grade<-function(entranceYears,major){
pick_year<-courseStructure$`學年`==entranceYears
pick_major<-str_detect(courseStructure$`應修系級`,major)
course<-courseStructure$`科目名稱`[pick_year&pick_major]
return(course)
}
list(
entranceYears=100:103,
year1=length(unlist(map(entranceYears,~same_grade(.x,"經濟系1")))),
year2=length(unlist(map(entranceYears,~same_grade(.x,"經濟系2")))),
year3=length(unlist(map(entranceYears,~same_grade(.x,"經濟系3")))),
year4=length(unlist(map(entranceYears,~same_grade(.x,"經濟系4"))))
)
list_econCourseCounts
n<- 540
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
grades <- c(52, 77, 59, 88, 90)
ifelse(grades >= 60, "及格", "不及格")
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/api/datasets/C3FFC733-C2E3-42C6-9C14-CDDDDF3D2AEC/json/preview") -> ntpc_building_info
n<- 543
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
n<- 543.5
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
n<- 54a
n<- 66
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
miniFun <- function(){
lubridate::now()
}
miniFun()
miniFun <- function() lubridate::now()
miniFun()
miniFun <- function() {lubridate::now()}
miniFun()
result <-
{
x <- 2
y <- 3
x**y+15
}
print(result)
result2 <-
{
x <- 2
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
result2 <-
{
x <- 2
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
result2 <-
{
x <- 2
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
result2 <-
{
x <- 4
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
myFun <- function(x,y){
return(x**y+15)
}
# 等同於
myFun2 <- function(x,y){
x**y+15
}
myFun(5,3) -> outcome
myFun2(5,3) -> outcome2
print(outcome)
print(outcome2)
myFun <- function(x,y){
return(x**y+15)
}
# 等同於
myFun2 <- function(x,y){
x**y+15
}
myFun(5,5) -> outcome
myFun2(5,3) -> outcome2
print(outcome)
print(outcome2)
a <- c(1,2,3)
cut(a, c(1,2,3))
a <- c(1,2,3)
cut(a, c(-Inf,2,3))
a <- c(1,2,3)
cut(a, c(-Inf,2,Inf))
typeof(a)
cut(a, c(-Inf,2,Inf))
class(a)
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade %>%
cut(c(-1,69,79,89,100)) -> grade
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace=T)
print(grade)
grade <- sample(1:100, 10, replace=T)
print(grade)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
grade <- sample(1:100, 10, replace=T)
print(grade)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
glue::glue("{today()} 18:00:00")
nowtime <- glue::glue("{today()} 18:00:00")  ymd_hms(tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00")  ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00")  ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00")  ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(,tz="Asia/Taipei")
cutpoints
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") ymd_hms(nowtime,tz="Asia/Taipei")
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
cutpoints
levels(nowtime)
levels(nowtime)
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
whatNeedToDo_butler_mom <- function(nowtime=now()){
library(lubridate)
library(glue)
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
}
ymd_hms(glue::glue("{today()} 08:00:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()} 14:00:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()} 18:00:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()+days(1)} 00:20:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/api/datasets/C3FFC733-C2E3-42C6-9C14-CDDDDF3D2AEC/json/preview") -> ntpc_building_info
View(ntpc_building_info)
str_detect(ntpc_building_info$`name`,"停車場")->ntpu_garage
# ntpc_building_parking
ntpu_garage
map(ntpc_building_info,~.x[ntpu_garage])
str_detect(ntpc_building_info$`name`,"停車場")->ntpu_garage
map(ntpc_building_info,~.x[ntpu_garage])->ntpc_garage
data.frame(ntpc_garage)->pc_building_parking
# ntpc_building_parking
str_detect(ntpc_building_info$`name`,"停車場")->ntpu_garage
map(ntpc_building_info,~.x[ntpu_garage])->ntpc_garage
data.frame(ntpc_garage)->ntpc_building_parking
ntpc_building_parking
levels(ntpc_building_info$`name`)
no_found<-if(ntpc_building_info){
# no_found
levels(ntpc_building_info$`name`)
levels(ntpc_building_info$`name`)
levels(ntpc_building_info$`name`)
