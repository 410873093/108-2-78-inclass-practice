names_element1
items %>% factor() -> items
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]]) -> names_element1
# names_element1
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
item<-map(cpiByIncome,~.x$`Item`)
# items
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
View(family_type)
View(family_type)
levels(family_type) -> currentLevels
currentLevels
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
# family_type
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
family_type
item->subcategory
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,"(?<=#")[:graph:]+(?=\\()")
)
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#")[:graph:]+(?=\\()")
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")
# subcategory
newLevels->levels(subcategory)
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
# subcategory
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
View(subcategory)
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
newLevels->levels(subcategory)
subcategory
newLevels
subcategory
levels(subcategory)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
items->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
levels(subcategory)
factor(
subcategory,
levels = c("一.食物類", "二.衣著類",
"三.居住類","四.交通及通訊類",
"五.醫藥保健類","六.教養娛樂類" , "七.雜項類" ,"總指數" )
)
# subcategory
subcategory
map(cpiByIncome,~.x$`type`=="原始值")->cpiValues
# cpiValues
map(cpiByIncome,~.x$`type`=="原始值")->map_step
unlist(map_step)->b
cpiByIncome[b]->cpiValues
# cpiValues
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
# realEstateRegex
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
# realEstateRegex
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
names(cpiByIncome[[1]]) -> names_element1
# names_element1
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
View(cpiByIncome)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.3)
.Last.value
dateInput <- today()
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
library(lubridate)
dateInput <- today()
locationInput <- "新北市"
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
askSilly_weather("臺中市",today())
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
now()
what_time_it_is("Europe/Paris")
now()
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
myDemand2(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
