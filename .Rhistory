hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
install.packages("purrr")
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
install.packages("purrr")
map(example, ~.x[pick_小新]) ->
data_selected
install.packages("purrr")
install.packages("stringr")
install.packages("purrr")
map(example, ~.x[pick_小新]) ->
data_selected
install.packages("purrr")
map(example, ~.x[pick_小新]) ->
data_selected
install.packages("stringr")
library(lubridate)
library(stringr)
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
library(purrr)
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~.x[pick_小新]) ->
data_selected
map(example, ~ .x[pick_小新]) ->
data_selected
map(example, ~ .x[pick_小新]) ->
data_selected
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~ .x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
View(dance)
View(dance)
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
View(dance)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
View(cpiByIncome)
View(cpiByIncome)
View(cpiByIncome)
names(cpiByIncome)
length(cpiByIncome)
names(cpiByIncome[[1]])->names_element1
names(cpiByIncome[[1]])->names_element1
# names_element1
names_element1
items %>% factor() -> items
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]]) -> names_element1
# names_element1
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
item<-map(cpiByIncome,~.x$`Item`)
# items
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
View(family_type)
View(family_type)
levels(family_type) -> currentLevels
currentLevels
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
# family_type
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
family_type
item->subcategory
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->family_type
levels(family_type)->current_level
str_extract(current_level,"[:graph:]+(?=#)")->newLevel
newLevel -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
family_type
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
item<-map(cpiByIncome,~.x$`Item`)
items <- unlist(list_items)
items %>% factor() -> items
# items
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,"(?<=#")[:graph:]+(?=\\()")
)
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#")[:graph:]+(?=\\()")
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")
# subcategory
newLevels->levels(subcategory)
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
# subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
# subcategory
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
View(subcategory)
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
subcategory
newLevels->levels(subcategory)
subcategory
newLevels
subcategory
levels(subcategory)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]])->names_element1
names_element1
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
# items
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
# family_type
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
item->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
items->subcategory
levels(subcategory)->currentLevels
str_extract(currentLevels,
"(?<=#)[:graph:]+(?=\\()")->newLevels
newLevels->levels(subcategory)
newLevels
subcategory
levels(subcategory)
factor(
subcategory,
levels = c("一.食物類", "二.衣著類",
"三.居住類","四.交通及通訊類",
"五.醫藥保健類","六.教養娛樂類" , "七.雜項類" ,"總指數" )
)
# subcategory
subcategory
map(cpiByIncome,~.x$`type`=="原始值")->cpiValues
# cpiValues
map(cpiByIncome,~.x$`type`=="原始值")->map_step
unlist(map_step)->b
cpiByIncome[b]->cpiValues
# cpiValues
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
# realEstateRegex
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
# realEstateRegex
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex<-"(不動產與?城鄉環?境?學系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
list_items <- map(cpiByIncome, ~ .x$Item)
items <- unlist(list_items)
items %>% factor() -> items
items
names(cpiByIncome[[1]]) -> names_element1
# names_element1
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
items -> family_type
levels(family_type) -> currentLevels
currentLevels
str_extract(currentLevels,"[:graph:]+(?=#)") -> newLevels
newLevels -> levels(family_type)
family_type
family_type <- factor(family_type, levels=c("全體家庭","最低20%所得家庭","中間60%所得家庭", "最高20%所得家庭"))
family_type
View(cpiByIncome)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
