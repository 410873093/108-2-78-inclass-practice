levels(as.factor(badEmployers$law))->violatedArticles
print(violatedArticles)
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
as.character(violatedArticles)
violatedArticles
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
violatedArticles
# violatedArticles
levels(as.factor(badEmployers$law))->violatedArticles
as.character(violatedArticles)
violatedArticles
# violatedArticles
table(badEmployers)
View(badEmployers)
table(violatedArticles)
table(violatedArticles)->table_countsByArticle
names(ta)
table(violatedArticles)->table_countsByArticle
names(table_countsByArticle)
# table_countsByArticle
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
levels(as.factor(badEmployers$law))->violatedArticles
violatedArticles
# violatedArticles
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
example[c("name","birthday","residence")]
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
str(example)
pick_above170 <- example$height >= 170
stringr::str_detect(CDC_chatbox$Question,"肺炎")->pick_CDC
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
str(CDC_chatbox)
stringr::str_detect(CDC_chatbox$Question,"肺炎")->pick_CDC
CDC_chatbox$Question[pick_CDC]
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
str(example)
pick_above170 <- example$height >= 170
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
str_sub("lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
str_sub("民國108年12月5日","民國98年10月5日")
",3,4,5)
str_sub("民國108年12月5日",3,4,5)
str_sub("108年12月5日",3,4,5)
str_sub("108125日",3,4,5)
str_sub("108125",3,4,5)
str_sub("1081205",3,4,5)
str_sub("1081205",3,4)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
str_count(heartSutra,"色") # 計數
str_view_all(heartSutra,"色") # 檢視
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_view_all(Ids, "[AC]")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_detect(Ids, "[AC]") # 偵測 出現A、C
Ids <- c("A283743192","B829103720","A10920402","c291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_detect(Ids, "[AC]") # 偵測 出現A、C
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
str_view_all(Ids, "[AC]")
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline, "謝無雙|官求敗")
str_count(headline, "[謝陳官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
print(pattern)
print(pattern)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
str_extract(addresses,"[0-9]+(?=號)")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
str_extract_all(
"我的名字8293叫17380小abce明",
"[:alnim]+")
str_extract_all(
"我的名字8293叫17380小abce明",
"[:alnum]+")
str_extract_all(
"我的名字8293叫17380小abce明",
"[:alnum:]+")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
twoNames
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
twoNames
str_extract_all(twoNames, "(段兄|段兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames[[1]]<-"後面鄰居不能有弟"<-back_regex
twoNames[[1]]<-"後面鄰居不能有弟"->back_regex
back_regex
# back_regex
twoNames[[2]]<-"後面鄰居不能有弟"->back_regex
back_regex
# back_regex
twoNames<-"後面鄰居不能有弟"->back_regex
back_regex
# back_regex
twoNames+<-"後面鄰居不能有弟"->back_regex
twoNames2<"後面鄰居不能有弟"
twoNames2<-"後面鄰居不能有弟"
paste0(twoNames,twoNames2)->back_regex
back_regex
# back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames2<-"後面鄰居不能有弟"
paste0(twoNames,twoNames2)->back_regex
back_regex
# back_regex
back_regex<-"(?!弟)"
back_regex
# back_regex
back_regex<-(?!弟)
back_regex
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-(?!弟)
back_regex
# back_regex
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex
# back_regex
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-(?!弟)
back_regex
# back_regex
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
install.packages("stringr")
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
install.packages("stringr")
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils
# context_picked
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
semiGodsSemiDevils$data[[1]]
# context_picked
View(semiGodsSemiDevils[[5]][[1]])
View(semiGodsSemiDevils[[5]][[1]])
View(semiGodsSemiDevils[[5]][[1]])
View(semiGodsSemiDevils[[5]][[1]])
semiGodsSemiDevils$data[[1]][["text"]]
se
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_pickes
context_picked
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_picked
context_picked
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s\\s")->context_picked_split
str_split(context_picked,"\\s\\s")->context_picked_split
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s\\s")->context_picked_split
install.packages("stringr")
str_split(context_picked,"\\s\\s")->context_picked_split
str_split(context_picked,"\\s\\s")->context_picked_split
install.packages("stringr")
str_split(context_picked,"\\s\\s")->context_picked_split
textExample <- c("段1......。　　段2....。")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s\\s")->context_picked_split
context_picked_split
# context_picked_split
str_split(context_picked,"\\s\\s")->context_picked_split
class(context_picked_split)
# context_picked_split
str_extract_all(context_picked_split[[1]],"段譽、段兄、段兄弟、段大哥、段相公、段君，及姓段的小子")->mention_duan
mention_duan
# mention_duan
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜及姓段的小子)")->mention_duan
mention_duan
# mention_duan
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")->mention_duan
mention_duan
# mention_duan
unlist(mention_duan)
# table_duan
View(mention_duan)
table(unlist(mention_duan))
# table_duan
table(unlist(mention_duan))->table_duan
# table_duan
table(unlist(mention_duan))->table_duan
table_duan
str_split(context_picked,"\\s\\s")->context_picked_split
context_picked_split
# context_picked_split
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")->mention_duan
mention_duan
# mention_duan
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")->mention_duan
mention_duan
# mention_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames2<-"後面鄰居不能有弟"
back_regex<-paste0(twoNames,twoNames2)
back_regex<-"(?!弟)"
back_regex
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
pattern
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s\\s")->context_picked_split
context_picked_split
# context_picked_split
str(context_picked_split)
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")->mention_duan
mention_duan
# mention_duan
mention_duan<-str_extract_all(context_picked_split)[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan<-str_extract_all(context_picked_split)[[1]] , "(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan<-str_extract_all(context_picked_split[[1]], "(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")->mention_duan
mention_duan
# mention_duan
mention_duan<-str_extract_all(context_picked_split[[1]], "(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
# mention_duan
View(context_picked_split)
mention_duan<-str_extract_all(context_picked_split,"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
# mention_duan
mention_duan<-str_extract_all(context_picked_split[[2]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
# mention_duan
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
# mention_duan
semiGodsSemiDevils$data[[1]][["text"]][[3]]->context_picked
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,"\\s\\s")->context_picked_split
context_picked_split
# context_picked_split
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽｜段兄｜段兄弟｜段大哥｜段相公｜段君｜姓段的小子)")
mention_duan
# mention_duan
mention_duan<-str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
# mention_duan
table(unlist(mention_duan))->table_duan
table_duan
