---
title: '20200318'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

## Creat object
```{r}
a <- 2
a = 2 # = 與 <-同義
```

```{r}
3 -> b
```

```{r}
a+b
```

```{R}
my_108_total_credits <- 15
_108_total_credits <- 15
108_total_credits <- 15
_my_108_total_credits <- 15
my.108.total_credits <- 15
.108.total_credits <- 15 # 隱藏變數
.my.108.total_credits <- 15
我的108學年總學分數 <- 15
`我的108學年總學分數` <- 15 # 特殊名稱處理，`不是名稱的一部份
`.108.total_credits` <- 15
```

```{R}
我的年紀<-19
my_age<-我的年紀
```

```{r}
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
```

```{r}
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
```

```{r}
dialogue <- c('小明說："明天不用上課。"',
               '小花說："真的嗎？"')

cat(dialogue, sep="\n")
```

```{r}
library(googlesheets4)
`出席狀況表單網址` <-  # 缺乏定義值
ss <- as_sheets_id(`https://docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit?usp=drive_open&ouid=113084002734216260518`)
homework_sheet <- sheets_read(ss,sheet=1)
```


```{r}
library(googlesheets4)
`出席狀況表單網址` <-  # 缺乏定義值
ss <- as_sheets_id(`https://docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit?usp=drive_open&ouid=113084002734216260518`)
homework_sheet <- sheets_read(ss,sheet=1)
```

```{r}
library(googlesheets4)
`出席狀況表單網址` <-  docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit#gid=987577191
ss <- as_sheets_id(`docs.google.com/spreadsheets/d/1oB-5hj1pO5g8FMpZbA7RgIG8NvCRx6WvLPwvleCEV4Q/edit#gid=987577191`)
homework_sheet <- sheets_read(ss,sheet=1)
```

```{r}
# 10位學生的主系
majors10_char <- c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')

typeof(majors10_char)
class(majors10_char)
```


```{r}
majors10_factor <- factor(majors10_char)
# 或
majors10_factor <- factor(
  c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
)

typeof(majors10_factor)
class(majors10_factor)
```

```{r}
studentId <- c(410773002, 410773015)
```

```{r}
stringInteger <- c("1","2","-11")
class(stringInteger)
as.integer(stringInteger)+6# 無法進行數值運算


```



```{r}
as.integer(stringInteger)->stringInteger
class(stringInteger)
```

台北 2020-03-18 13:52:40
```{r}
tpeTime <- ymd_hms("2020-03-18 13:52:40",
        tz="Asia/Taipei")
```


```{r}
library(lubridate)
tpeTime <- ymd_hms("2020-03-18 13:52:40",
        tz="Asia/Taipei")
```

```{r}
tpeTime <- lubridate::ymd_hms("2020-03-18 13:52:40",
        tz="Asia/Taipei")
```

```{r}
pgTime <- mdy_hms("Mar.18, 2020, 05:52:40",
                  tz="Europe/Lisbon")
```

```{r}

class(tpeTime)
typeof(tpeTime)

as.numeric(tpeTime)
as.numeric(pgTime)
```

```{r}
library(lubridate)
`小明交易1` <- list(
  ymd_hms("2020-03-31T13:40:55Z"), # Date/Time class
  "一芳", # character
  2, # numeric
  "水果茶" # character
)
print(`小明交易1`)
```
```{r}
# list含兩個vectors
`小明108學年課表A` <- list(
  c("108-1","高級會計學","高等統計學"),
  c("108-2","食在拉丁美洲")
)
print(`小明108學年課表A`)
```
```{r}
# list含兩個lists
`小明108學年課表B` <- list(
  list("108-1","高級會計學","高等統計學"),
  list("108-2","食在拉丁美洲")
)
print(`小明108學年課表B`)
```
```{r}
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(
  list(
    c("108-1"), # 可只寫 "108-1"
    c("高級會計學","高等統計學")
       ),
  list(
    c("108-2"),
    c("食在拉丁美洲")
  )
)
print(`小明108學年課表C`)
```


```{r}
# list含兩個lists, 子層list又各含兩個vectors
`小明108學年課表C` <- list(
  `上學期`=list(
    semester=c("108-1"), # 可只寫 "108-1"
    courses=c("高級會計學","高等統計學")
       ),
  `下學期`=list(
    semester=c("108-2"),
    courses=c("食在拉丁美洲")
  )
)
print(`小明108學年課表C`)
```

```{r}
commit<- list(
  author=list(
    name="Martin老師",
   email=" mtlingm.ntpu.edu.tw",
   ymd_hms("2020-03-25T07:17:40z")),
  committer=list(
    name="emilylucky",
   email= "emily007@gmail.com",
    ymd_hms("2020-03026T08:18:40z")
  ),
  message="update"
)
print(commit)
#
#
  

```

```{r}
# 108-1 
course1_1081 <- 
  list(
    name="個體經濟學",
    teacher="Alice",
    grade=85
  )
course2_1081 <-
  list(
    name="總體經濟學",
    teacher="Mark",
    grade=78
  )
`108-1修課記錄` <- 
  list(
    course1_1081,
    course2_1081
  )

# 108-2
course1_1082 <- 
  list(
    name="作業研究",
    teacher="Jason",
    grade=90
  )
`108-2修課記錄` <- 
  list(
    course1_1082
  )

# 整合兩學期
`每學期修課記錄` <- list(
  `108-1`=`108-1修課記錄`,
  `108-2`=`108-2修課記錄`
)

# 完成記錄
`小明的修課記錄` <- 
  list(
    name="小明",
    semesters=`每學期修課記錄`
  )
```

```{r}
library(jsonlite)
fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
```

```{r}
vectorExample <- c("小明","小英","大雄")

# 有多少位置可選：
length(vectorExample)
```
```{r}
vectorExample[[1]]
vectorExample[[3]]
```

```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)
```
```{r}
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap

length(tainanSportsMap)

```
```{r}
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
```

```{r}
# 有多少名字可選：
names(listExample)
```
```{r}
listExample$student
listExample$`學期` # 特殊命名依然要用反頓點呼叫




```{r}
str(listExample$`學期`)
```



```{r}
str(listExample)
```
```{r}
str(listExample$`學期`)
```

```{r}
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
         simplifyDataFrame = F) -> newTaipeiCityVaccine
```

```{r}
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
```
```{r}
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
```
```{r}
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
```

```{r}
# 顯示到第一層
str(listExample, max.level=1)

str(listExample[c(1,2)],max.level = 1)
```
```{r}
listExample[c("學期")]

```

```{r}
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
```

```{r}
str(taipeiNightMarkets[c("景美夜市","寧夏觀光夜市")])
```

```{r}
str(listExample)
str(listExample[c(F,T)])

```
```{r}
names(taipeiNightMarkets)
```
```{r}
str(taipeiNightMarkets[c(T,F
                         ,F,F
                         ,F,F
                         ,F,F,
                         F,F,
                         F,F
                         ,F,F)])
```

```{r}
rep(F,14)
```
```{r}
str(listExample)
```




```{r}
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
```

```{r}
#get1 # 學期拿出來，有3個元素的list
str(listExample,max.level = 3)
```
```{r}
get1<-listExample[["學期"]]
str(get1,max.level = 1)
```
```{r}
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2

 #相當於
numVector[c(1,4)][[1]]
```
```{r}
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2

# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
```
```{r}
library(lubridate)
`小明交易1` <- list(
  ymd_hms("2020-03-31T13:40:55Z"), # Date/Time class
  "一芳", # character
  2, # numeric
  "水果茶" # character
)
print(`小明交易1`)
```

```{r}
source("https://www.dropbox.com/s/cqg0h2i5sfxsh1f/studentEnvironmentReport.R?dl=1",print.eval = T)
```

```{r}
str(listExample)
```
```{r}
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
```
```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )
# 有多少位置可選：
length(listExample)
```
```{r}
listExample[[1]]
listExample[[2]]
```
```{r}
str(listExample)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
```

```{r}
get1 # 學期拿出來，有3個元素的list
str(get1)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
```

```{r}
get1 <- listExample[["學期"]]
get1$`108-1`->get1_layer1
get1_layer1[[1]]->get1_layer2
get1_layer2$teacher

listExample[["學期"]]$`108-1`[[1]]$teacher
```
```{r}
get2[[1]][["108-1"]][[1]]$teacher
```



```{r}
today <- list(
  list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))
str(today)
```

```{r}
today <- list(
  list("台北市",
       highest_temp=c(highest_temp = 25),
       lowest_temp=c(lowest_temp = 18)),
  list("新北市",
      highest_temp=c(highest_temp = 24),
      lowest_temp=c(lowest_temp = 15)))
str(today)

```


```{r}
today[[1]]$highest_temp

```

```{r}
tomorrow <- list(
  list("台北市",c(highest_temp = 25),c(lowest_temp = 18)),
  list("新北市",c(highest_temp = 24),c(lowest_temp = 15)))

weather <- list(today,tomorrow)

print(weather)
```

```{r}
weather[[1]][[2]]$highest_temp # 今天/新北市/highest_temp
weather[[2]][[2]]$highest_temp # 明天/新北市/highest_temp
```

```{r}
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
```



```{r}

a[[7]]<-"johnson"
a<-c(a,c("mary"))
str(a)

```

```{r}
library(lubridate)
list1 <- 
  list(
    list(
      name="Jack",
      birthday=ymd("1998-03-21"),
      status=c(height=177, weight=80)
    )
  )

str(list1)
```

```{r}
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")

# 新增資料
list1[[2]] <- list(
  name="Mary",
  birthday=ymd("1998-08-24")
)

str(list1)
```
```{r}
list1[[2]]$status <- c(height=163, weight=45)
list1[[1]]$status[["height"]] <- 176
str(list1)
```
```{r}
list1[[1]][["age"]] <- 21

# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
```
```{r}
list1[[2]]["age"] <- list(21)
str(list1)

```

```{r}
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)

str(list1)
```
```{r}
print(a)
a[-c(1,3)]
a[c(-2)]

print(a)
a[-c(1,3)] -> a 
print(a)# 要回存才算真的刪除
```
```{r}
str(list1)
```

```{r}
list1[[1]][-3] -> list1[[1]] # 小心回存的位置

list1[[2]][-c(4,5)] -> list1[[2]]
str(list1)
```
```{r}
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
``` 

```{r}
poem_songpoem_singOrder->poem_song
```


```{r}
a <- c(2, 3, 5)
b <- c(4,-1, 3)
```
```{r}
a+b
a-b
a*b
a/b
```

```{r}
a %% b
a ** b
```
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)

sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
```
```{r}
# a+b 即等於
c(2+4, 3+(-1), 5+3)
# a**b 即等於
c(2**4, 3**(-1), 5**3)
```
```{r}
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)

## 對向量5，向量7進行recycle:
c(5,5,5)*c(1,3,4)+c(7,7,7)
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
```
```{r}
# 狀況一: 堆疊一定倍數剛好一樣長
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
```



```{r}
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2,3)/c(-2,-13,10)
c(2,3,2)/c(-2,-13,10)
```
```{r}
paste0(
  c("我叫"), c("小明","小美")
)c("我叫"), c("小明","小美"))
```



```{r}
paste0(
  c("他叫","我叫"), c("小明","小美","大雄")
)
```
```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)

str(example)
```
```{r}
str(example[c("name","height")])

example$name[c(T,F,T,F)]
example$height>=170->pick_above170
example$name[pick_above170]
```

```{r}

source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")

str(transcript100to103)

```

```{r}
# 只要成績大於85的
pick_above85 <-
  transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
 
```
```{r}
print(example[c("name","birthday")])

pick_after98 <- example$birthday >= 
  lubridate::ymd("1998-01-01")
example$name[pick_after98]
```
```{r}
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
```
```{r}
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-exchangeRate$期間 >=lubridate:: ymd("1998-01-01")
exchangeRate_after98 <-
  list(
    `期間`=exchangeRate$`期間`[pick_after98_01],
    `幣別`=exchangeRate$`幣別`[pick_after98_01],
    `匯率`=exchangeRate$`匯率`[pick_after98_01] )

```
  
```{r}
print(example[c("name","allowance")])
example$allowance <- 
  ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
```
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female
    )
as.integer(list_victimAges_female$`數目`)->list_victimAges_female$`數目`

as.vector(list_victimAges_female$`年齡層`)->list_victimAges_female$`年齡層`


levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
sum(list_victimAges_female$`數目`,na.rm=T)
```


```{r}
print(example[c("name","bloodType")])

pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
```
```{r}
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)

pick_even<-(sequenceNums%% 2)==0
sequenceNums[pick_even]


```


```{r}
x <- c(1,5,8)
y <- c(5,8)

# x裡的元素值是不是屬於y集合
x %in% y
```

```{r}
print(example[c("name","residence")])

set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
str(transcript100to103)
```
```{r}

set_LawBusiness<-c("法學院","商學院")

transcript100to103$學院%in%set_LawBusiness->pick_LawBusiness
unique(transcript100to103$`學院`)

str(transcript100to103)
```


```{r}
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理 <- ! pick_fromTaipeiMetro
# 或

example$name[pick_not_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
```

```{r}
x2 <- c(1,NA,10)
y2 <- c(-1,NA,20)

x3 <- c(NA,"小花")
y3 <- c(NA,"小華")

is.na(x2)
```
```{r}
x2
is.na(x2)
```

```{r}
print(example[c("name","weight")])

pick_na <- is.na(example$weight)
example$name[pick_na]
0/0
```
```{r}
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
```


```{r}
print(example[c("name","hobby")])

pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
```


```{r}
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
  garbageRoutes

str(garbageRoutes)

#  1 用typeof()函數查詢電腦實質上如何看待garbageRoutes。
typeof(garbageRoutes)  
#  2 用class()函數查詢電腦把它能進行的操作運算歸屬於哪一類型。
class(garbageRoutes)
```
```{r}
# 由linename元素判斷垃圾車有幾條路線。
 factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
  
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
  stringr::str_detect(
    garbageRoutes$linename,
    "下午"  )
garbageRoutes$linename[pick_afternoonRoutes]


```
```{r}
install.packages("stringr")
```


```{r}
fruit <- c("apple", "banana", "pear", "pinapple")
stringr::str_detect(fruit, "a")
stringr::str_detect(fruit, "^a")
stringr::str_detect(fruit, "a$")
stringr::str_detect(fruit, "[aeiou]")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")

# Also vectorised over pattern
str_detect("aecfg", letters)


# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
```
```{r}
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
str(CDC_chatbox)
```


```{r}
stringr::str_detect(CDC_chatbox$Question,"肺炎")->pick_CDC
CDC_chatbox$Question[pick_CDC]
```



















