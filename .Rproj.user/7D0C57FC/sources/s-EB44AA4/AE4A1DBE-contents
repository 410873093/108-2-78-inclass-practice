---
title: "R Notebook"
output: html_notebook
---

This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. 

Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. 

```{r}
plot(cars)
```

Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.

When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).

The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
```{r}
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
  function(p){ # 定義這個物件為函數
    q_d <- 10-5*p # 小心是5*p, 不能寫5p
  }
```
```{r}
# p=1.2的需求量
demand(1.2) 
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
```


```{r}
demand_return <- 
  function(p){
    q_d <- 10-5*p
    return(q_d)
  }
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.3)
```
```{r}
.Last.value
```


```{r}
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
```

```{r}
askSilly_weather <- function(locationInput,dateInput){
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
```



```{r}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
```



```{r}
now()
what_time_it_is("Europe/Paris")
```


```{r}
class(demand_return)
```
```{r}
# 查詢函數formals arguments要求
formals(askSilly_weather)
```
```{r}
learning_topics <- 
  list(
    subject="函數",
    date=lubridate::ymd("2020-06-03"),
    functionsCreated=list(
      demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
    )
  )
learning_topics$functionsCreated$demand(1.2)

```


```{r}
typeof(demand_return)
```


```{r}
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
```
```{r}
intercept <- 10
slope <- -5
myDemand <- function(p){
  q_d <- intercept + slope*p
  return(q_d)
}

environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand) 

# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
```


```{r}
myDemand2 <- function(p, intercept=10, slope=-5){
  q_d <- intercept + slope*p
  return(q_d)
}

environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
```



```{r}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId 

# 之後才執行以下程式
library(stringr)
if(
  str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
  warning("你所輸入的學號不正確")
}


```

```{r}
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
  install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
```


```{r}
convert_TaiwanDate2WesternDate <- function(twDate){
  
  if(!require("stringr")){
    install.packages("stringr")
  }
  if(!require("lubridate")){
    install.packages("lubridate")
  }
  
  library(stringr)
  regex_pattern <-
    "(?<=民國)[0-9]+(?=年)"
  
  # 取出民國年，計算西元年
  year <- 
    str_extract(
      twDate,
      regex_pattern)
  westernYear <- as.integer(year)+1911
  
  # 替換民國xx年的xx成西元年數字
  str_replace(
    twDate,
    regex_pattern,  # 要換掉的文字
    as.character(westernYear) # 要替換的內容
  ) -> twDate_reformat
  
  lubridate::ymd(twDate_reformat) -> westernDate
  return(westernDate)
}
```




```{r}
library(clipr)
```

```{r}
# 檢視步驟耗時elapse time
system.time(
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
)
weather_next36hours
```

```{r}
if(!exists("weather_next36hours")){
    jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
    weather_next36hours
  SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}

```

```{r}

askSilly_weather <- function(locationInput,dateInput){
  jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
```

```{r}
askSilly_weather2 <- function(locationInput,dateInput){
  if(!exists("weather_next36hours")){
      jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
      weather_next36hours
    SOAR::Store(weather_next36hours) # 存在.R_cache environment中
  }  
  (weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
  
  weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
  (weatherAtLocation$elementName=="MaxT") ->
    pick_MaxT
  (weatherAtLocation$elementName=="MinT") ->
    pick_MinT
  weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
  weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
  
  glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
```
 
 
```{r}
 system.time(
  askSilly_weather("新北市",today())
)
system.time(
  askSilly_weather("臺北市",today())
)

askSilly_weather("新北市",today())
askSilly_weather("臺北市",today())
```
 
```{r}

 SOAR::Remove(weather_next36hours)
system.time(
  askSilly_weather2("新北市",today())
)
system.time(
  askSilly_weather2("臺北市",today())
)

askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
```
 
 
```{r}
 # n 為偶數
n <- 54
fvalue <- n/2

# n 為奇數
n <- 33
fvalue <- -(n+1)/2
```

```{r}
(n %% 2)==1 # 表示「奇數」; 或...

as.logical(n %% 2) # 只有0會變F，其他數值都是T

```


```{r}
n <- 53
if((n %% 2)==1){
  fvalue<- -(n+1)/2
} else{
  fvalue<-n/2
} 
print(fvalue)
```


```{r}
myFun <- function(n){
  if(as.logical(n %% 2)){
    fvalue <- -(n+1)/2
  } else {
    fvalue <- n/2
  }
  return(fvalue)
}

myFun(54)
myFun(33)
```
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime


head(examSubmissionTime$section)
head(examSubmissionTime$time)
```




```{r}
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]

deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") # 

howEarly <- deadline - lubridate::ymd_hms(
  student_i_time, tz="Asia/Taipei") 
print(howEarly)
```
```{r}
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")

howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
```

```{r}

i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]

if(student_i_section=="56"){
  deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
  deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}

howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)


```



```{r}
studentSequence <- 1:length(examSubmissionTime$section)

map(studentSequence,
    ~compute_howEarly(
      examSubmissionTime$section[[.x]],
      examSubmissionTime$time[[.x]])
    ) -> list_howEarly
```
```{r}
library(magrittr)
list_howEarly %>%
  unlist() -> examSubmissionTime$howEarly

pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])

pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])


```



```{r}
78-> grade # 單獨執行
if(grade >=90){
  print("優")
} else if(grade>=80 & grade<=89){
  print("良")
} else if(grade>=70 & grade<=79){
  print("尚可")
} else {
  print("待加強")
}
```




```{r}
switch(實現的conditionExpression,
       "conditionExpression1"= {    },
       "conditionExpression2"= {    },
       :
       :
       "conditionExpressionN"= {    },
       {    })
```

```{r}

n<- 66

conditionExpression_outcome=
  ifelse(n %% 2==0, "even", "odd") 

switch(
  conditionExpression_outcome,
  "even"={fvalue <- n/2}, # 偶數
  "odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
  warning("n要整數喔")  
)

print(fvalue)


```
```{r}
grades <- c(52, 77, 59, 88, 90)

ifelse(grades >= 60, "及格", "不及格")
```

```{r}

miniFun <- function() {lubridate::now()}
miniFun()
```
```{r}
result <- 
  {
    x <- 2
    y <- 3
    x**y+15
  }
print(result)
```


```{r}
result2 <-
  {
    x <- 4
    y <- 3
    if(x< 3){
      warning("x值太小")
    } else {
      x**y+15
    }
  }
print(result2)

```

```{r}
myFun <- function(x,y){
  return(x**y+15)
}

# 等同於
myFun2 <- function(x,y){
  x**y+15
}

myFun(5,5) -> outcome
myFun2(5,3) -> outcome2
print(outcome)
print(outcome2)
```

```{r}
a <- c(1,2,3)
class(a)
cut(a, c(-Inf,2,Inf))
```

```{r}
grade <- sample(1:100, 10, replace=T)
print(grade)
grade %>%
  cut(c(-1,69,79,89,100)) -> grade
 
levels(grade)

switch(
  as.character(grade[[1]]),
  "(-1,69]"={
    print("-_-")
    "F"},
  "(69,79]"={
    print("棒")
    "C"
    },
  "(79,89]"={
    print("好棒")
    "B"
    },
  "(89,100]"={ 
    print("好棒棒")
    "A"
    } 
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
```

```{r}
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")


library(lubridate)
library(glue)

# 建立可當cutpoints的一天時間點
cutpoints <-
  c(
    glue("{today()} 06:00:00"),
    glue("{today()} 09:00:00"),
    glue("{today()} 17:00:00"), 
    glue("{today()} 19:00:00"),
    glue("{today()} 23:30:00"),
    glue("{today()+days(1)} 01:00:00")
  )
cutpoints %>%
  ymd_hms(tz="Asia/Taipei") -> cutpoints

## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
  c("morning","evening","jazz time")

## 使用switch決定要做什麼事
switch(
  as.character(nowtime),
  "morning"={
    print("要不要來閱讀點國際時事？")
    browseURL("https://economist.com")
  },
  "evening"={
    print("需不需要點餐呢？")
    browseURL("https://www.foodpanda.com.tw/")
  },
  "jazz time"={
    print("放鬆聽點Jazz。")
    browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
  },
  {
    print("機器人要休息，饒了我吧～～")
  }
)
```
 


```{r}
whatNeedToDo_butler_mom <- function(nowtime=now()){
  library(lubridate)
  library(glue)

  cutpoints <-
    c(
      glue("{today()} 06:00:00"),
      glue("{today()} 09:00:00"),
      glue("{today()} 17:00:00"),
      glue("{today()} 19:00:00"),
      glue("{today()} 23:30:00"),
      glue("{today()+days(1)} 01:00:00")
    )
  cutpoints %>%
    ymd_hms(tz="Asia/Taipei") -> cutpoints
  
  cut(nowtime, cutpoints) -> nowtime
  levels(nowtime)[c(1,3,5)] <-
    c("morning","evening","jazz time")
  
  switch(
    as.character(nowtime),
    "morning"={
      print("要不要來閱讀點國際時事？")
      browseURL("https://economist.com")
    },
    "evening"={
      print("需不需要點餐呢？")
      browseURL("https://www.foodpanda.com.tw/")
    },
    "jazz time"={
      print("放鬆聽點Jazz。")
      browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
    },
    {
      print("機器人要休息，饒了我吧～～")
    }
  )
}

ymd_hms(glue::glue("{today()} 08:00:00"),tz="Asia/Taipei") %>%
  whatNeedToDo_butler_mom()

ymd_hms(glue::glue("{today()} 14:00:00"),tz="Asia/Taipei") %>%
  whatNeedToDo_butler_mom()

ymd_hms(glue::glue("{today()} 18:00:00"),tz="Asia/Taipei") %>%
  whatNeedToDo_butler_mom()

ymd_hms(glue::glue("{today()+days(1)} 00:20:00"),tz="Asia/Taipei") %>%
  whatNeedToDo_butler_mom()
```

```{r}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)

if(myAnswer == correctAnswer){ # 只取用第一個T/F
  print("你答對了")
}
```
```{r}
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")
```


```{r}
myAnswer <- c(2,4,7)
correctAnswer <- c(2,3,5)

if(any(myAnswer == correctAnswer)){ # 要全TRUE
  print("你答對了")
}
if(any(myAnswer == correctAnswer)){ # 只要有一個TRUE
  print("裡頭有數字是對的")
}
```

```{r}
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
class(myAnswer)
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
  print("答對了")
  10
} else {
  print("答錯了")
  0
}-> myGrade
myGrade
```
```{r}
myAge <- 67
myChildrenNumber <- 5

if(myAge >=65 | myChildrenNumber >3){
  "符合申請資格"
} else {
  warning("不符合申請資格")
}

if(myAge >=65 ||  myChildrenNumber >3){
  "符合申請資格"
} else {
  warning("不符合申請資格")
}
```
```{r}

x <- c(2,5,10,-21,3,8)
ifelse(x %% 2==0, "even", "odd")
```

```{r}
y <- sample(40:100,20, replace=T)
dplyr::case_when(
  y < 60 ~ "F",
  60<=y & y < 70 ~"D",
  71<=y & y < 80 ~"C",
  80<=y & y < 90 ~"B",
  90<=y ~ "A"
)
```

```{r}
sampleData <- list(
  list("男", 45), list("女", 32), list("男",50), list("男",33), list("女", 21)
)
```
```{r}
# 前三筆性別
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
```

```{r}
sampleData[[1]][[1]]  
sampleData[[2]][[1]] 
sampleData[[3]][[1]] 
```

```{r}
# 串接寫法(I): external dispatch
sampleData[[1]] %>% {.[[1]]} 
sampleData[[2]] %>% {.[[1]]}
sampleData[[3]] %>% {.[[1]]}

map(sampleData, ~{.x[[1]]})

# 串接寫法(II): internal dispatch
1 %>% {sampleData[[.]][[1]]}  
2 %>% {sampleData[[.]][[1]]}  
3 %>% {sampleData[[.]][[1]]}

map(1:5, ~{sampleData[[.x]][[1]]})
# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
```

```{r}
eggs <- rep("雞蛋x1", 8)

fryEgg <- function(egg){
  str_replace(egg, "雞蛋", "荷包蛋")
}

# external dispatch
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)

map(eggs, ~fryEgg(.x)) -> friedEggs1

# internal dispatch
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}

map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
```

```{r}
grade <- c(45, 74, NA)

i<-1

grade_i <- grade[[i]]
if(!is.na(grade_i)){
  if(grade_i >= 60){
    "P"
  } else if(grade_i < 60 ) {
    "F"
  }
} else {
  "缺考"
}
```

```{r}
pass_or_fail <- function(grade_i){
  if(!is.na(grade_i)){
    if(grade_i >= 60){
      "P"
    } else if(grade_i < 60 ) {
      "F"
    }
  } else {
    "缺考"
  }
}

pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])

# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
```

```{r}
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}

map(grade, ~{pass_or_fail(.)}) # map to list

map_chr(grade, ~{pass_or_fail(.)}) # map to atom. vectof of class character

map_pass_fail <- function(grade){
  map_chr(grade, ~{pass_or_fail(.)})
}



map_pass_fail(grade)
```


```{r}
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)

toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
  if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
  if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
  if(is.null(ham) || !str_detect(ham,  "火腿")){stop("少了火腿")} 
  "火腿蛋三明治"
}

# 土司、火腿、蛋 第一份出列
1 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第二份出列
2 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第三份出列
3 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}


map(1:10,
    ~{toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]])})
```
```{r}
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
```

```{r}
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3

# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
  (courseStructure$學年==acadYear_i 
    &
    str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])

# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
  (courseStructure$學年==acadYear_i 
    &
    str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])

# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
  (courseStructure$學年==acadYear_i 
    &
    str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])

# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
pick <-
  (courseStructure$學年==acadYear_i 
    &
    str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
```


```{r}
pick <-
  (courseStructure$學年==acadYear_i 
    &
    str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])

```

